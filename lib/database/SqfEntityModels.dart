import 'dart:convert';

import 'package:eps_open_api_reference_app/database/Database.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:sqfentity/db/sqfEntityBase.dart';

/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import DatabaseAccount.dart into where to use
      - start typing DatabaseAccount().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(databaseaccount) / or toList(databaseaccountList)
      - you can select one DatabaseAccount or List<DatabaseAccount> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region DatabaseAccount
class DatabaseAccount {
  // FIELDS
  int id;
  String type;
  String balance;
  String name;
  String number;
  String currency_label;
  String currency;
  bool favorite;
  String payment_provider_code;
  int DatabaseTableCardId;

  // end FIELDS

  // RELATIONSHIPS
  getDatabaseCard(VoidCallback databasecard(DatabaseCard o)) {
    DatabaseCard().getById(DatabaseTableCardId, (obj) {
      databasecard(obj);
    });
  }

  // END RELATIONSHIPS

  static const bool _softDeleteActivated = false;
  DatabaseAccountManager __mnDatabaseAccount;
  DatabaseAccountFilterBuilder _select;

  DatabaseAccountManager get _mnDatabaseAccount {
    if (__mnDatabaseAccount == null) __mnDatabaseAccount = new DatabaseAccountManager();
    return __mnDatabaseAccount;
  }

  DatabaseAccount(
      {this.id,
      this.type,
      this.balance,
      this.name,
      this.number,
      this.currency_label,
      this.currency,
      this.favorite,
      this.payment_provider_code,
      this.DatabaseTableCardId}) {
    setDefaultValues();
  }

  DatabaseAccount.withFields(this.type, this.balance, this.name, this.number, this.currency_label, this.currency, this.favorite, this.payment_provider_code,
      this.DatabaseTableCardId) {
    setDefaultValues();
  }

  DatabaseAccount.withId(this.id, this.type, this.balance, this.name, this.number, this.currency_label, this.currency, this.favorite,
      this.payment_provider_code, this.DatabaseTableCardId) {
    setDefaultValues();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;
    if (type != null) map["type"] = type;
    if (balance != null) map["balance"] = balance;
    if (name != null) map["name"] = name;
    if (number != null) map["number"] = number;
    if (currency_label != null) map["currency_label"] = currency_label;
    if (currency != null) map["currency"] = currency;
    if (favorite != null) map["favorite"] = forQuery ? (favorite ? 1 : 0) : favorite;
    if (payment_provider_code != null) map["payment_provider_code"] = payment_provider_code;
    if (DatabaseTableCardId != null) map["DatabaseTableCardId"] = DatabaseTableCardId;

    return map;
  }

  DatabaseAccount.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.type = o["type"];
    this.balance = o["balance"];
    this.name = o["name"];
    this.number = o["number"];
    this.currency_label = o["currency_label"];
    this.currency = o["currency"];
    this.favorite = o["favorite"] != null ? o["favorite"] == 1 : null;
    this.payment_provider_code = o["payment_provider_code"];
    this.DatabaseTableCardId = o["DatabaseTableCardId"];
  }

  List<dynamic> toArgs() {
    return [id, type, balance, name, number, currency_label, currency, favorite, payment_provider_code, DatabaseTableCardId];
  }

  static fromWebUrl(String url, VoidCallback databaseaccountList(List<DatabaseAccount> o)) async {
    var objList = List<DatabaseAccount>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((databaseaccount) => DatabaseAccount.fromMap(databaseaccount)).toList();
        databaseaccountList(objList);
      } catch (e) {
        print("SQFENTITY ERROR DatabaseAccount.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<DatabaseAccount>> fromObjectList(Future<List<dynamic>> o) async {
    var databaseaccountsList = new List<DatabaseAccount>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        databaseaccountsList.add(DatabaseAccount.fromMap(data[i]));
      }
    });
    return databaseaccountsList;
  }

  static List<DatabaseAccount> fromMapList(List<Map<String, dynamic>> query) {
    List<DatabaseAccount> databaseaccounts = List<DatabaseAccount>();
    for (Map map in query) {
      databaseaccounts.add(DatabaseAccount.fromMap(map));
    }
    return databaseaccounts;
  }

  /// returns DatabaseAccount by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns DatabaseAccount if exist, otherwise returns null</returns>
  getById(int id, VoidCallback databaseaccount(DatabaseAccount o)) {
    DatabaseAccount databaseaccountObj;
    var databaseaccountFuture = _mnDatabaseAccount.getById(id);
    databaseaccountFuture.then((data) {
      if (data.length > 0)
        databaseaccountObj = DatabaseAccount.fromMap(data[0]);
      else
        databaseaccountObj = null;
      databaseaccount(databaseaccountObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnDatabaseAccount
          .insert(DatabaseAccount.withFields(type, balance, name, number, currency_label, currency, favorite, payment_provider_code, DatabaseTableCardId));
    else
      id = await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<DatabaseAccount> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<DatabaseAccount> databaseaccounts) async {
    var results = _mnDatabaseAccount.saveAll(
        "INSERT OR REPLACE INTO DatabaseTableAccount (id, type,balance,name,number,currency_label,currency,favorite,payment_provider_code,DatabaseTableCardId)  VALUES (?,?,?,?,?,?,?,?,?,?)",
        databaseaccounts);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnDatabaseAccount.rawInsert(
        "INSERT OR REPLACE INTO DatabaseTableAccount (id, type,balance,name,number,currency_label,currency,favorite,payment_provider_code,DatabaseTableCardId)  VALUES (?,?,?,?,?,?,?,?,?,?)",
        [id, type, balance, name, number, currency_label, currency, favorite, payment_provider_code, DatabaseTableCardId]);
    return id;
  }

  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<DatabaseAccount> databaseaccounts) async {
    var results = await _mnDatabaseAccount.rawInsertAll(
        "INSERT OR REPLACE INTO DatabaseTableAccount (id, type,balance,name,number,currency_label,currency,favorite,payment_provider_code,DatabaseTableCardId)  VALUES (?,?,?,?,?,?,?,?,?,?)",
        databaseaccounts);
    return results;
  }

  /// <summary>
  /// saveAs DatabaseAccount. Returns a new Primary Key value of DatabaseAccount
  /// </summary>
  /// <returns>Returns a new Primary Key value of DatabaseAccount</returns>
  Future<int> saveAs() async {
    id = await _mnDatabaseAccount
        .insert(DatabaseAccount.withFields(type, balance, name, number, currency_label, currency, favorite, payment_provider_code, DatabaseTableCardId));
    return id;
  }

  /// <summary>
  /// Deletes DatabaseAccount
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete DatabaseAccount invoked (id=$id)");
    if (!_softDeleteActivated)
      return _mnDatabaseAccount.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnDatabaseAccount.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }

  //private DatabaseAccountFilterBuilder _Select;
  DatabaseAccountFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new DatabaseAccountFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted == true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  DatabaseAccountFilterBuilder distinct({List<String> columnsToSelect, bool getIsDeleted}) {
    DatabaseAccountFilterBuilder _distinct = new DatabaseAccountFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted == true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if (DatabaseTableCardId == null) DatabaseTableCardId = 0;
  }
//end methods
}
// endregion databaseaccount

// region DatabaseAccountField
class DatabaseAccountField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  DatabaseAccountFilterBuilder databaseaccountFB;

  DatabaseAccountField(DatabaseAccountFilterBuilder fb) {
    param = new DbParameter();
    databaseaccountFB = fb;
  }

  DatabaseAccountField get not {
    _waitingNot = " NOT ";
    return this;
  }

  DatabaseAccountFilterBuilder equals(var pValue) {
    param.expression = "=";
    databaseaccountFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, databaseaccountFB.parameters, param, SqlSyntax.EQuals, databaseaccountFB._addedBlocks)
        : setCriteria(pValue, databaseaccountFB.parameters, param, SqlSyntax.NotEQuals, databaseaccountFB._addedBlocks);
    _waitingNot = "";
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    return databaseaccountFB;
  }

  DatabaseAccountFilterBuilder isNull() {
    databaseaccountFB._addedBlocks =
        setCriteria(0, databaseaccountFB.parameters, param, SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databaseaccountFB._addedBlocks);
    _waitingNot = "";
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    return databaseaccountFB;
  }

  DatabaseAccountFilterBuilder contains(dynamic pValue) {
    databaseaccountFB._addedBlocks = setCriteria("%" + pValue + "%", databaseaccountFB.parameters, param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databaseaccountFB._addedBlocks);
    _waitingNot = "";
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    return databaseaccountFB;
  }

  DatabaseAccountFilterBuilder startsWith(dynamic pValue) {
    databaseaccountFB._addedBlocks = setCriteria(
        pValue + "%", databaseaccountFB.parameters, param, SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databaseaccountFB._addedBlocks);
    _waitingNot = "";
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    return databaseaccountFB;
  }

  DatabaseAccountFilterBuilder endsWith(dynamic pValue) {
    databaseaccountFB._addedBlocks = setCriteria(
        "%" + pValue, databaseaccountFB.parameters, param, SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databaseaccountFB._addedBlocks);
    _waitingNot = "";
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    return databaseaccountFB;
  }

  DatabaseAccountFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      databaseaccountFB._addedBlocks = setCriteria(
          pFirst, databaseaccountFB.parameters, param, SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databaseaccountFB._addedBlocks, pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        databaseaccountFB._addedBlocks = setCriteria(pFirst, databaseaccountFB.parameters, param, SqlSyntax.LessThan, databaseaccountFB._addedBlocks);
      else
        databaseaccountFB._addedBlocks =
            setCriteria(pFirst, databaseaccountFB.parameters, param, SqlSyntax.GreaterThanOrEquals, databaseaccountFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        databaseaccountFB._addedBlocks = setCriteria(pLast, databaseaccountFB.parameters, param, SqlSyntax.GreaterThan, databaseaccountFB._addedBlocks);
      else
        databaseaccountFB._addedBlocks = setCriteria(pLast, databaseaccountFB.parameters, param, SqlSyntax.LessThanOrEquals, databaseaccountFB._addedBlocks);
    }
    _waitingNot = "";
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    return databaseaccountFB;
  }

  DatabaseAccountFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    databaseaccountFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, databaseaccountFB.parameters, param, SqlSyntax.GreaterThan, databaseaccountFB._addedBlocks)
        : setCriteria(pValue, databaseaccountFB.parameters, param, SqlSyntax.LessThanOrEquals, databaseaccountFB._addedBlocks);
    _waitingNot = "";
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    return databaseaccountFB;
  }

  DatabaseAccountFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    databaseaccountFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, databaseaccountFB.parameters, param, SqlSyntax.LessThan, databaseaccountFB._addedBlocks)
        : setCriteria(pValue, databaseaccountFB.parameters, param, SqlSyntax.GreaterThanOrEquals, databaseaccountFB._addedBlocks);
    _waitingNot = "";
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    return databaseaccountFB;
  }

  DatabaseAccountFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    databaseaccountFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, databaseaccountFB.parameters, param, SqlSyntax.GreaterThanOrEquals, databaseaccountFB._addedBlocks)
        : setCriteria(pValue, databaseaccountFB.parameters, param, SqlSyntax.LessThan, databaseaccountFB._addedBlocks);
    _waitingNot = "";
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    return databaseaccountFB;
  }

  DatabaseAccountFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    databaseaccountFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, databaseaccountFB.parameters, param, SqlSyntax.LessThanOrEquals, databaseaccountFB._addedBlocks)
        : setCriteria(pValue, databaseaccountFB.parameters, param, SqlSyntax.GreaterThan, databaseaccountFB._addedBlocks);
    _waitingNot = "";
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    return databaseaccountFB;
  }

  DatabaseAccountFilterBuilder inValues(var pValue) {
    databaseaccountFB._addedBlocks =
        setCriteria(pValue, databaseaccountFB.parameters, param, SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databaseaccountFB._addedBlocks);
    _waitingNot = "";
    databaseaccountFB._addedBlocks.needEndBlock[databaseaccountFB._blockIndex] = databaseaccountFB._addedBlocks.retVal;
    return databaseaccountFB;
  }
}
// endregion DatabaseAccountField

// region DatabaseAccountFilterBuilder
class DatabaseAccountFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  DatabaseAccount _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  DatabaseAccountFilterBuilder(DatabaseAccount obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  DatabaseAccountFilterBuilder get and {
    if (parameters.length > 0) parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  DatabaseAccountFilterBuilder get or {
    if (parameters.length > 0) parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  DatabaseAccountFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  DatabaseAccountFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  DatabaseAccountFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  DatabaseAccountFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  DatabaseAccountFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  DatabaseAccountFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  DatabaseAccountFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  DatabaseAccountFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  DatabaseAccountField setField(DatabaseAccountField field, String colName, DbType dbtype) {
    field = new DatabaseAccountField(this);
    field.param = new DbParameter(dbType: dbtype, columnName: colName, wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  DatabaseAccountField _id;

  DatabaseAccountField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }

  DatabaseAccountField _type;

  DatabaseAccountField get type {
    _type = setField(_type, "type", DbType.text);
    return _type;
  }

  DatabaseAccountField _balance;

  DatabaseAccountField get balance {
    _balance = setField(_balance, "balance", DbType.text);
    return _balance;
  }

  DatabaseAccountField _name;

  DatabaseAccountField get name {
    _name = setField(_name, "name", DbType.text);
    return _name;
  }

  DatabaseAccountField _number;

  DatabaseAccountField get number {
    _number = setField(_number, "number", DbType.text);
    return _number;
  }

  DatabaseAccountField _currency_label;

  DatabaseAccountField get currency_label {
    _currency_label = setField(_currency_label, "currency_label", DbType.text);
    return _currency_label;
  }

  DatabaseAccountField _currency;

  DatabaseAccountField get currency {
    _currency = setField(_currency, "currency", DbType.text);
    return _currency;
  }

  DatabaseAccountField _favorite;

  DatabaseAccountField get favorite {
    _favorite = setField(_favorite, "favorite", DbType.bool);
    return _favorite;
  }

  DatabaseAccountField _payment_provider_code;

  DatabaseAccountField get payment_provider_code {
    _payment_provider_code = setField(_payment_provider_code, "payment_provider_code", DbType.text);
    return _payment_provider_code;
  }

  DatabaseAccountField _DatabaseTableCardId;

  DatabaseAccountField get DatabaseTableCardId {
    _DatabaseTableCardId = setField(_DatabaseTableCardId, "DatabaseTableCardId", DbType.integer);
    return _DatabaseTableCardId;
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value.toString().replaceAll("[", "").replaceAll("]", "").toString();
          whereString += param.whereString.replaceAll("{field}", param.columnName).replaceAll("?", param.value);
          param.value = null;
        } else
          whereString += param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (DatabaseAccount._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") + " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<DatabaseAccount> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r = BoolResult();
    if (DatabaseAccount._softDeleteActivated)
      r = await _obj._mnDatabaseAccount.updateBatch(qparams, {"isDeleted": 1});
    else
      r = await _obj._mnDatabaseAccount.delete(qparams);
    return r;
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnDatabaseAccount.updateBatch(qparams, values);
  }

  /// This method always returns DatabaseAccountObj if exist, otherwise returns null
  /// <returns>List<DatabaseAccount></returns>
  void toSingle(VoidCallback databaseaccount(DatabaseAccount o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnDatabaseAccount.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        databaseaccount(DatabaseAccount.fromMap(data[0]));
      else
        databaseaccount(null);
    });
  }

  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback databaseaccountCount(int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var databaseaccountsFuture = await _obj._mnDatabaseAccount.toList(qparams);
    int count = databaseaccountsFuture[0]["CNT"];
    databaseaccountCount(count);
    return BoolResult(
        success: count > 0, successMessage: count > 0 ? "toCount(): $count items found" : "", errorMessage: count > 0 ? "" : "toCount(): no items found");
  }

  /// This method always returns List<DatabaseAccount>.
  /// <returns>List<DatabaseAccount></returns>
  void toList(VoidCallback databaseaccountList(List<DatabaseAccount> o)) async {
    _buildParameters();

    var databaseaccountsFuture = _obj._mnDatabaseAccount.toList(qparams);

    List<DatabaseAccount> databaseaccountsData = new List<DatabaseAccount>();
    databaseaccountsFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        databaseaccountsData.add(DatabaseAccount.fromMap(data[i]));
      }
      databaseaccountList(databaseaccountsData);
      databaseaccountsData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList(List<int> o), [bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns = ["id"];
    var idFuture = await _obj._mnDatabaseAccount.toList(qparams);

    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList(idData);
    return idData;
  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnDatabaseAccount.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });
  }
}
// endregion DatabaseAccountFilterBuilder

// region DatabaseAccountFields
class DatabaseAccountFields {
  static TableField _fId;

  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }

  static TableField _fType;

  static TableField get type {
    _fType = SqlSyntax.setField(_fType, "type", DbType.text);
    return _fType;
  }

  static TableField _fBalance;

  static TableField get balance {
    _fBalance = SqlSyntax.setField(_fBalance, "balance", DbType.text);
    return _fBalance;
  }

  static TableField _fName;

  static TableField get name {
    _fName = SqlSyntax.setField(_fName, "name", DbType.text);
    return _fName;
  }

  static TableField _fNumber;

  static TableField get number {
    _fNumber = SqlSyntax.setField(_fNumber, "number", DbType.text);
    return _fNumber;
  }

  static TableField _fCurrency_label;

  static TableField get currency_label {
    _fCurrency_label = SqlSyntax.setField(_fCurrency_label, "currency_label", DbType.text);
    return _fCurrency_label;
  }

  static TableField _fCurrency;

  static TableField get currency {
    _fCurrency = SqlSyntax.setField(_fCurrency, "currency", DbType.text);
    return _fCurrency;
  }

  static TableField _fFavorite;

  static TableField get favorite {
    _fFavorite = SqlSyntax.setField(_fFavorite, "favorite", DbType.bool);
    return _fFavorite;
  }

  static TableField _fPayment_provider_code;

  static TableField get payment_provider_code {
    _fPayment_provider_code = SqlSyntax.setField(_fPayment_provider_code, "payment_provider_code", DbType.text);
    return _fPayment_provider_code;
  }

  static TableField _fDatabaseTableCardId;

  static TableField get DatabaseTableCardId {
    _fDatabaseTableCardId = SqlSyntax.setField(_fDatabaseTableCardId, "DatabaseTableCardId", DbType.integer);
    return _fDatabaseTableCardId;
  }
}
// endregion DatabaseAccountFields

//region DatabaseAccountManager
class DatabaseAccountManager extends SqfEntityProvider {
  static String _tableName = "DatabaseTableAccount";
  static String _colId = "id";

  DatabaseAccountManager() : super(Database(), tableName: _tableName, colId: _colId);
}
//endregion DatabaseAccountManager

/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import DatabaseCard.dart into where to use
      - start typing DatabaseCard().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(databasecard) / or toList(databasecardList)
      - you can select one DatabaseCard or List<DatabaseCard> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region DatabaseCard
class DatabaseCard {
  // FIELDS
  int id;
  String status;
  String currency;
  int exp_y;
  int exp_m;
  String masked_number;
  bool is_virtual;
  bool is_reloadable;
  String limit_groups;

  // end FIELDS

  // COLLECTIONS
  getDatabaseAccounts(VoidCallback databaseaccountList(List<DatabaseAccount> o)) {
    DatabaseAccount().select().DatabaseTableCardId.equals(id).toList((objList) {
      databaseaccountList(objList);
    });
  }

  // END COLLECTIONS

  static const bool _softDeleteActivated = false;
  DatabaseCardManager __mnDatabaseCard;
  DatabaseCardFilterBuilder _select;

  DatabaseCardManager get _mnDatabaseCard {
    if (__mnDatabaseCard == null) __mnDatabaseCard = new DatabaseCardManager();
    return __mnDatabaseCard;
  }

  DatabaseCard({this.id, this.status, this.currency, this.exp_y, this.exp_m, this.masked_number, this.is_virtual, this.is_reloadable, this.limit_groups}) {
    setDefaultValues();
  }

  DatabaseCard.withFields(this.status, this.currency, this.exp_y, this.exp_m, this.masked_number, this.is_virtual, this.is_reloadable, this.limit_groups) {
    setDefaultValues();
  }

  DatabaseCard.withId(this.id, this.status, this.currency, this.exp_y, this.exp_m, this.masked_number, this.is_virtual, this.is_reloadable, this.limit_groups) {
    setDefaultValues();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;
    if (status != null) map["status"] = status;
    if (currency != null) map["currency"] = currency;
    if (exp_y != null) map["exp_y"] = exp_y;
    if (exp_m != null) map["exp_m"] = exp_m;
    if (masked_number != null) map["masked_number"] = masked_number;
    if (is_virtual != null) map["is_virtual"] = forQuery ? (is_virtual ? 1 : 0) : is_virtual;
    if (is_reloadable != null) map["is_reloadable"] = forQuery ? (is_reloadable ? 1 : 0) : is_reloadable;
    if (limit_groups != null) map["limit_groups"] = limit_groups;

    return map;
  }

  DatabaseCard.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.status = o["status"];
    this.currency = o["currency"];
    this.exp_y = o["exp_y"];
    this.exp_m = o["exp_m"];
    this.masked_number = o["masked_number"];
    this.is_virtual = o["is_virtual"] != null ? o["is_virtual"] == 1 : null;
    this.is_reloadable = o["is_reloadable"] != null ? o["is_reloadable"] == 1 : null;
    this.limit_groups = o["limit_groups"];
  }

  List<dynamic> toArgs() {
    return [id, status, currency, exp_y, exp_m, masked_number, is_virtual, is_reloadable, limit_groups];
  }

  static fromWebUrl(String url, VoidCallback databasecardList(List<DatabaseCard> o)) async {
    var objList = List<DatabaseCard>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((databasecard) => DatabaseCard.fromMap(databasecard)).toList();
        databasecardList(objList);
      } catch (e) {
        print("SQFENTITY ERROR DatabaseCard.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<DatabaseCard>> fromObjectList(Future<List<dynamic>> o) async {
    var databasecardsList = new List<DatabaseCard>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        databasecardsList.add(DatabaseCard.fromMap(data[i]));
      }
    });
    return databasecardsList;
  }

  static List<DatabaseCard> fromMapList(List<Map<String, dynamic>> query) {
    List<DatabaseCard> databasecards = List<DatabaseCard>();
    for (Map map in query) {
      databasecards.add(DatabaseCard.fromMap(map));
    }
    return databasecards;
  }

  /// returns DatabaseCard by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns DatabaseCard if exist, otherwise returns null</returns>
  getById(int id, VoidCallback databasecard(DatabaseCard o)) {
    DatabaseCard databasecardObj;
    var databasecardFuture = _mnDatabaseCard.getById(id);
    databasecardFuture.then((data) {
      if (data.length > 0)
        databasecardObj = DatabaseCard.fromMap(data[0]);
      else
        databasecardObj = null;
      databasecard(databasecardObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnDatabaseCard.insert(DatabaseCard.withFields(status, currency, exp_y, exp_m, masked_number, is_virtual, is_reloadable, limit_groups));
    else
      id = await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<DatabaseCard> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<DatabaseCard> databasecards) async {
    var results = _mnDatabaseCard.saveAll(
        "INSERT OR REPLACE INTO DatabaseTableCard (id, status,currency,exp_y,exp_m,masked_number,is_virtual,is_reloadable,limit_groups)  VALUES (?,?,?,?,?,?,?,?,?)",
        databasecards);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnDatabaseCard.rawInsert(
        "INSERT OR REPLACE INTO DatabaseTableCard (id, status,currency,exp_y,exp_m,masked_number,is_virtual,is_reloadable,limit_groups)  VALUES (?,?,?,?,?,?,?,?,?)",
        [id, status, currency, exp_y, exp_m, masked_number, is_virtual, is_reloadable, limit_groups]);
    return id;
  }

  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<DatabaseCard> databasecards) async {
    var results = await _mnDatabaseCard.rawInsertAll(
        "INSERT OR REPLACE INTO DatabaseTableCard (id, status,currency,exp_y,exp_m,masked_number,is_virtual,is_reloadable,limit_groups)  VALUES (?,?,?,?,?,?,?,?,?)",
        databasecards);
    return results;
  }

  /// <summary>
  /// saveAs DatabaseCard. Returns a new Primary Key value of DatabaseCard
  /// </summary>
  /// <returns>Returns a new Primary Key value of DatabaseCard</returns>
  Future<int> saveAs() async {
    id = await _mnDatabaseCard.insert(DatabaseCard.withFields(status, currency, exp_y, exp_m, masked_number, is_virtual, is_reloadable, limit_groups));
    return id;
  }

  /// <summary>
  /// Deletes DatabaseCard
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete DatabaseCard invoked (id=$id)");
    var result = BoolResult();
    result = await DatabaseAccount().select().DatabaseTableCardId.equals(id).delete();
    if (!result.success)
      return result;
    else if (!_softDeleteActivated)
      return _mnDatabaseCard.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnDatabaseCard.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }

  //private DatabaseCardFilterBuilder _Select;
  DatabaseCardFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new DatabaseCardFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted == true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  DatabaseCardFilterBuilder distinct({List<String> columnsToSelect, bool getIsDeleted}) {
    DatabaseCardFilterBuilder _distinct = new DatabaseCardFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted == true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {}
//end methods
}
// endregion databasecard

// region DatabaseCardField
class DatabaseCardField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  DatabaseCardFilterBuilder databasecardFB;

  DatabaseCardField(DatabaseCardFilterBuilder fb) {
    param = new DbParameter();
    databasecardFB = fb;
  }

  DatabaseCardField get not {
    _waitingNot = " NOT ";
    return this;
  }

  DatabaseCardFilterBuilder equals(var pValue) {
    param.expression = "=";
    databasecardFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, databasecardFB.parameters, param, SqlSyntax.EQuals, databasecardFB._addedBlocks)
        : setCriteria(pValue, databasecardFB.parameters, param, SqlSyntax.NotEQuals, databasecardFB._addedBlocks);
    _waitingNot = "";
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    return databasecardFB;
  }

  DatabaseCardFilterBuilder isNull() {
    databasecardFB._addedBlocks =
        setCriteria(0, databasecardFB.parameters, param, SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databasecardFB._addedBlocks);
    _waitingNot = "";
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    return databasecardFB;
  }

  DatabaseCardFilterBuilder contains(dynamic pValue) {
    databasecardFB._addedBlocks = setCriteria(
        "%" + pValue + "%", databasecardFB.parameters, param, SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databasecardFB._addedBlocks);
    _waitingNot = "";
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    return databasecardFB;
  }

  DatabaseCardFilterBuilder startsWith(dynamic pValue) {
    databasecardFB._addedBlocks = setCriteria(
        pValue + "%", databasecardFB.parameters, param, SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databasecardFB._addedBlocks);
    _waitingNot = "";
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    return databasecardFB;
  }

  DatabaseCardFilterBuilder endsWith(dynamic pValue) {
    databasecardFB._addedBlocks = setCriteria(
        "%" + pValue, databasecardFB.parameters, param, SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databasecardFB._addedBlocks);
    _waitingNot = "";
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    return databasecardFB;
  }

  DatabaseCardFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      databasecardFB._addedBlocks = setCriteria(
          pFirst, databasecardFB.parameters, param, SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databasecardFB._addedBlocks, pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        databasecardFB._addedBlocks = setCriteria(pFirst, databasecardFB.parameters, param, SqlSyntax.LessThan, databasecardFB._addedBlocks);
      else
        databasecardFB._addedBlocks = setCriteria(pFirst, databasecardFB.parameters, param, SqlSyntax.GreaterThanOrEquals, databasecardFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        databasecardFB._addedBlocks = setCriteria(pLast, databasecardFB.parameters, param, SqlSyntax.GreaterThan, databasecardFB._addedBlocks);
      else
        databasecardFB._addedBlocks = setCriteria(pLast, databasecardFB.parameters, param, SqlSyntax.LessThanOrEquals, databasecardFB._addedBlocks);
    }
    _waitingNot = "";
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    return databasecardFB;
  }

  DatabaseCardFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    databasecardFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, databasecardFB.parameters, param, SqlSyntax.GreaterThan, databasecardFB._addedBlocks)
        : setCriteria(pValue, databasecardFB.parameters, param, SqlSyntax.LessThanOrEquals, databasecardFB._addedBlocks);
    _waitingNot = "";
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    return databasecardFB;
  }

  DatabaseCardFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    databasecardFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, databasecardFB.parameters, param, SqlSyntax.LessThan, databasecardFB._addedBlocks)
        : setCriteria(pValue, databasecardFB.parameters, param, SqlSyntax.GreaterThanOrEquals, databasecardFB._addedBlocks);
    _waitingNot = "";
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    return databasecardFB;
  }

  DatabaseCardFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    databasecardFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, databasecardFB.parameters, param, SqlSyntax.GreaterThanOrEquals, databasecardFB._addedBlocks)
        : setCriteria(pValue, databasecardFB.parameters, param, SqlSyntax.LessThan, databasecardFB._addedBlocks);
    _waitingNot = "";
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    return databasecardFB;
  }

  DatabaseCardFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    databasecardFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, databasecardFB.parameters, param, SqlSyntax.LessThanOrEquals, databasecardFB._addedBlocks)
        : setCriteria(pValue, databasecardFB.parameters, param, SqlSyntax.GreaterThan, databasecardFB._addedBlocks);
    _waitingNot = "";
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    return databasecardFB;
  }

  DatabaseCardFilterBuilder inValues(var pValue) {
    databasecardFB._addedBlocks =
        setCriteria(pValue, databasecardFB.parameters, param, SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot), databasecardFB._addedBlocks);
    _waitingNot = "";
    databasecardFB._addedBlocks.needEndBlock[databasecardFB._blockIndex] = databasecardFB._addedBlocks.retVal;
    return databasecardFB;
  }
}
// endregion DatabaseCardField

// region DatabaseCardFilterBuilder
class DatabaseCardFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  DatabaseCard _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  DatabaseCardFilterBuilder(DatabaseCard obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  DatabaseCardFilterBuilder get and {
    if (parameters.length > 0) parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  DatabaseCardFilterBuilder get or {
    if (parameters.length > 0) parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  DatabaseCardFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  DatabaseCardFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  DatabaseCardFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  DatabaseCardFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  DatabaseCardFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  DatabaseCardFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  DatabaseCardFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  DatabaseCardFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  DatabaseCardField setField(DatabaseCardField field, String colName, DbType dbtype) {
    field = new DatabaseCardField(this);
    field.param = new DbParameter(dbType: dbtype, columnName: colName, wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  DatabaseCardField _id;

  DatabaseCardField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }

  DatabaseCardField _status;

  DatabaseCardField get status {
    _status = setField(_status, "status", DbType.text);
    return _status;
  }

  DatabaseCardField _currency;

  DatabaseCardField get currency {
    _currency = setField(_currency, "currency", DbType.text);
    return _currency;
  }

  DatabaseCardField _exp_y;

  DatabaseCardField get exp_y {
    _exp_y = setField(_exp_y, "exp_y", DbType.integer);
    return _exp_y;
  }

  DatabaseCardField _exp_m;

  DatabaseCardField get exp_m {
    _exp_m = setField(_exp_m, "exp_m", DbType.integer);
    return _exp_m;
  }

  DatabaseCardField _masked_number;

  DatabaseCardField get masked_number {
    _masked_number = setField(_masked_number, "masked_number", DbType.text);
    return _masked_number;
  }

  DatabaseCardField _is_virtual;

  DatabaseCardField get is_virtual {
    _is_virtual = setField(_is_virtual, "is_virtual", DbType.bool);
    return _is_virtual;
  }

  DatabaseCardField _is_reloadable;

  DatabaseCardField get is_reloadable {
    _is_reloadable = setField(_is_reloadable, "is_reloadable", DbType.bool);
    return _is_reloadable;
  }

  DatabaseCardField _limit_groups;

  DatabaseCardField get limit_groups {
    _limit_groups = setField(_limit_groups, "limit_groups", DbType.text);
    return _limit_groups;
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value.toString().replaceAll("[", "").replaceAll("]", "").toString();
          whereString += param.whereString.replaceAll("{field}", param.columnName).replaceAll("?", param.value);
          param.value = null;
        } else
          whereString += param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (DatabaseCard._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") + " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<DatabaseCard> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r = BoolResult();
    if (DatabaseCard._softDeleteActivated)
      r = await _obj._mnDatabaseCard.updateBatch(qparams, {"isDeleted": 1});
    else
      r = await _obj._mnDatabaseCard.delete(qparams);
    return r;
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnDatabaseCard.updateBatch(qparams, values);
  }

  /// This method always returns DatabaseCardObj if exist, otherwise returns null
  /// <returns>List<DatabaseCard></returns>
  void toSingle(VoidCallback databasecard(DatabaseCard o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnDatabaseCard.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        databasecard(DatabaseCard.fromMap(data[0]));
      else
        databasecard(null);
    });
  }

  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback databasecardCount(int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var databasecardsFuture = await _obj._mnDatabaseCard.toList(qparams);
    int count = databasecardsFuture[0]["CNT"];
    databasecardCount(count);
    return BoolResult(
        success: count > 0, successMessage: count > 0 ? "toCount(): $count items found" : "", errorMessage: count > 0 ? "" : "toCount(): no items found");
  }

  /// This method always returns List<DatabaseCard>.
  /// <returns>List<DatabaseCard></returns>
  void toList(VoidCallback databasecardList(List<DatabaseCard> o)) async {
    _buildParameters();

    var databasecardsFuture = _obj._mnDatabaseCard.toList(qparams);

    List<DatabaseCard> databasecardsData = new List<DatabaseCard>();
    databasecardsFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        databasecardsData.add(DatabaseCard.fromMap(data[i]));
      }
      databasecardList(databasecardsData);
      databasecardsData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList(List<int> o), [bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns = ["id"];
    var idFuture = await _obj._mnDatabaseCard.toList(qparams);

    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList(idData);
    return idData;
  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnDatabaseCard.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });
  }
}
// endregion DatabaseCardFilterBuilder

// region DatabaseCardFields
class DatabaseCardFields {
  static TableField _fId;

  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }

  static TableField _fStatus;

  static TableField get status {
    _fStatus = SqlSyntax.setField(_fStatus, "status", DbType.text);
    return _fStatus;
  }

  static TableField _fCurrency;

  static TableField get currency {
    _fCurrency = SqlSyntax.setField(_fCurrency, "currency", DbType.text);
    return _fCurrency;
  }

  static TableField _fExp_y;

  static TableField get exp_y {
    _fExp_y = SqlSyntax.setField(_fExp_y, "exp_y", DbType.integer);
    return _fExp_y;
  }

  static TableField _fExp_m;

  static TableField get exp_m {
    _fExp_m = SqlSyntax.setField(_fExp_m, "exp_m", DbType.integer);
    return _fExp_m;
  }

  static TableField _fMasked_number;

  static TableField get masked_number {
    _fMasked_number = SqlSyntax.setField(_fMasked_number, "masked_number", DbType.text);
    return _fMasked_number;
  }

  static TableField _fIs_virtual;

  static TableField get is_virtual {
    _fIs_virtual = SqlSyntax.setField(_fIs_virtual, "is_virtual", DbType.bool);
    return _fIs_virtual;
  }

  static TableField _fIs_reloadable;

  static TableField get is_reloadable {
    _fIs_reloadable = SqlSyntax.setField(_fIs_reloadable, "is_reloadable", DbType.bool);
    return _fIs_reloadable;
  }

  static TableField _fLimit_groups;

  static TableField get limit_groups {
    _fLimit_groups = SqlSyntax.setField(_fLimit_groups, "limit_groups", DbType.text);
    return _fLimit_groups;
  }
}
// endregion DatabaseCardFields

//region DatabaseCardManager
class DatabaseCardManager extends SqfEntityProvider {
  static String _tableName = "DatabaseTableCard";
  static String _colId = "id";

  DatabaseCardManager() : super(Database(), tableName: _tableName, colId: _colId);
}
//endregion DatabaseCardManager
