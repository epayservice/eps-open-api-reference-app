def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def androidSigningConfigsReleaseStoreFile = localProperties.getProperty('android.signingConfigs.release.storeFile')
def androidSigningConfigsReleaseStorePassword = localProperties.getProperty('android.signingConfigs.release.storePassword')
def androidSigningConfigsReleaseKeyAlias = localProperties.getProperty('android.signingConfigs.release.keyAlias')
def androidSigningConfigsReleaseKeyPassword = localProperties.getProperty('android.signingConfigs.release.keyPassword')
def isAndroidSigningConfigsReleaseExist = (androidSigningConfigsReleaseStoreFile != null && androidSigningConfigsReleaseStorePassword != null && androidSigningConfigsReleaseKeyAlias != null && androidSigningConfigsReleaseKeyPassword != null)

if (android.buildTypes.release == true && !isAndroidSigningConfigsReleaseExist) {
    throw new GradleException("No release build settings were found in the local.properties file. See android/app/build.gradle file.")
}

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.epayservices.eps_open_api_reference_app"
        minSdkVersion 18
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    if (isAndroidSigningConfigsReleaseExist) {
        signingConfigs {
            release {
                storeFile rootProject.file(androidSigningConfigsReleaseStoreFile)
                storePassword androidSigningConfigsReleaseStorePassword
                keyAlias androidSigningConfigsReleaseKeyAlias
                keyPassword androidSigningConfigsReleaseKeyPassword
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        if (isAndroidSigningConfigsReleaseExist) {
            release {
                signingConfig signingConfigs.release
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {}

apply plugin: 'com.google.gms.google-services'